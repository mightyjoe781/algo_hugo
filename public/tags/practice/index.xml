<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>practice on smk&#39;s Blogs</title>
    <link>https://algo.minetest.in/tags/practice/</link>
    <description>Recent content in practice on smk&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 May 2021 17:09:18 +0530</lastBuildDate><atom:link href="https://algo.minetest.in/tags/practice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Problems : Basics 1</title>
      <link>https://algo.minetest.in/Practice_Problems1/</link>
      <pubDate>Sat, 15 May 2021 23:01:25 +0530</pubDate>
      
      <guid>https://algo.minetest.in/Practice_Problems1/</guid>
      <description>Problems on Theory Predicate Framework of Binary SearchBinary Search continued ....Recursion 1Recursion 2Recursion 32 PointersAd Hoc</description>
    </item>
    
    <item>
      <title>Problems : Basics 2</title>
      <link>https://algo.minetest.in/Practice_Problems/</link>
      <pubDate>Mon, 19 Apr 2021 21:51:25 +0530</pubDate>
      
      <guid>https://algo.minetest.in/Practice_Problems/</guid>
      <description>Problems on Theory SortingLinked ListsStacksQueuesLinked ListsBinary Search TreeBST ReviewTrees-1Trees-2</description>
    </item>
    
    <item>
      <title>Problems : Basics 3</title>
      <link>https://algo.minetest.in/Practice_Problems2/</link>
      <pubDate>Fri, 09 Jul 2021 12:25:25 +0530</pubDate>
      
      <guid>https://algo.minetest.in/Practice_Problems2/</guid>
      <description>Problems on Theory SortingHeapsTriesBit ManipulationStrings 1Strings from cp-algorithms</description>
    </item>
    
    <item>
      <title>Problems : DP</title>
      <link>https://algo.minetest.in/Practice_DP/</link>
      <pubDate>Thu, 22 Apr 2021 22:54:25 +0530</pubDate>
      
      <guid>https://algo.minetest.in/Practice_DP/</guid>
      <description>Problems on Dynamic Programming DP 1DP 2DP 3DP 4DP 5</description>
    </item>
    
    <item>
      <title>Problems : Graphs</title>
      <link>https://algo.minetest.in/Practice_Graphs/</link>
      <pubDate>Mon, 10 May 2021 17:09:18 +0530</pubDate>
      
      <guid>https://algo.minetest.in/Practice_Graphs/</guid>
      <description>Problems on Graphs Graphs 1Graphs 2Graphs 3Graphs 4</description>
    </item>
    
    <item>
      <title>DP 1</title>
      <link>https://algo.minetest.in/Practice_DP/DP_1/</link>
      <pubDate>Wed, 21 Apr 2021 09:51:25 +0530</pubDate>
      
      <guid>https://algo.minetest.in/Practice_DP/DP_1/</guid>
      <description>This is long sections divided into 3 parts. Its very important for interviews.
In recursion we say subproblems were related to the original problems does they always have to be ? Should they be in recurrence relation to each other.
Sometimes we do not need to do that necessarily.
What Dynamic Programming is =&amp;gt; DnC ( divide and conquer) + something extra &amp;hellip;
what this extra is ?
Climbing Stairs :</description>
    </item>
    
    <item>
      <title>Graphs 1</title>
      <link>https://algo.minetest.in/Practice_Graphs/Graphs_1/</link>
      <pubDate>Sat, 24 Apr 2021 10:24:25 +0530</pubDate>
      
      <guid>https://algo.minetest.in/Practice_Graphs/Graphs_1/</guid>
      <description>Why we use graphs Graphs help us model a specific type of data that has some dependency and relationships.
Eg. Facebook friends data, Routes between cities and places (models the connectivity and distance) , Networking (connectivity), Pre-requisite of courses (knowledge and dependency), File Systems, Resource Allocation in OS (handling deadlocks).
Representation of Graphs Represented as a Nodes and edges. Nodes : data while edge represents relationships.
Most Simplest implementation is adjacency matrix but its not memory efficient for sparse graphs.</description>
    </item>
    
    <item>
      <title>Graphs 2</title>
      <link>https://algo.minetest.in/Practice_Graphs/Graphs_2/</link>
      <pubDate>Sat, 24 Apr 2021 23:01:25 +0530</pubDate>
      
      <guid>https://algo.minetest.in/Practice_Graphs/Graphs_2/</guid>
      <description>Strong and Weak Connectivity These terms arise in Directed Graph.
Weak Connectivity : Take a directed graph and convert into undirected graph and do connectivity operations on that is called as weak connectivity.
Strong Connectivity : (A,B) are strongly connected $\iff \exists $ path b/w A &amp;amp; B.
â€‹	A &amp;ndash;&amp;gt; B and B&amp;ndash;&amp;gt;A
Graph Cyclicity Cycle : A sequence of nodes and edges such that first and last node of sequence is same.</description>
    </item>
    
    <item>
      <title>Graphs 3</title>
      <link>https://algo.minetest.in/Practice_Graphs/Graphs_3/</link>
      <pubDate>Thu, 29 Apr 2021 17:16:25 +0530</pubDate>
      
      <guid>https://algo.minetest.in/Practice_Graphs/Graphs_3/</guid>
      <description>Shortest Paths in Weighted Graph Weighted Graphs quantify degree of relationship between vertices.
This weight is on edges.
Earlier during level traversal we used to queue to get most recent insertion but now we will use priority queues. Now last in last out property now will be on the basis of weights.
Network Delay Time
Problem is correctly solved using MSTs
But we will solve using above concept.
int networkDelayTime(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; times, int n, int k) { // construct the graph.</description>
    </item>
    
    <item>
      <title>Graphs 4</title>
      <link>https://algo.minetest.in/Practice_Graphs/Graphs_4/</link>
      <pubDate>Mon, 10 May 2021 17:09:18 +0530</pubDate>
      
      <guid>https://algo.minetest.in/Practice_Graphs/Graphs_4/</guid>
      <description>Disjoint Data Structures Redundant Connections
Lets traverse input and construct graph.
$ I = [e_1, e_2,&amp;hellip;,e_n]$ : These are edges and now we consider we have some $m$ nodes
Now traverse $I$ and add edges to nodes and we keep checking the cycles at each addition. Every edge that is added and causes cycle is the redundant!
So Basically problem is keeping a set of nodes and connecting them and checking the cyclicity at each addition.</description>
    </item>
    
  </channel>
</rss>
