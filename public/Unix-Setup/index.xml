<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unix Setup on smk&#39;s Blogs</title>
    <link>https://algo.minetest.in/Unix-Setup/</link>
    <description>Recent content in Unix Setup on smk&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://algo.minetest.in/Unix-Setup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>updates</title>
      <link>https://algo.minetest.in/Unix-Setup/updates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://algo.minetest.in/Unix-Setup/updates/</guid>
      <description>Probably first thing after installing an OS is to update it
Debian Guide apt-get update apt-get upgrade apt-get dist-upgrade apt-get autoremove This should upgrade the OS to latest debian release : Note that it only upgrades distro within its series for example 10.1 to 10.8
Checking the distro
cat /etc/os-release Then install basic utilities.
FreeBSD Guide Upgrading packages within same release
freebsd-update fetch freebsd-update install if anything goes wrong do this</description>
    </item>
    
    <item>
      <title>shells</title>
      <link>https://algo.minetest.in/Unix-Setup/shells/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://algo.minetest.in/Unix-Setup/shells/</guid>
      <description>Debian Check the file/etc/shells
if it doesn&amp;rsquo;t contain following line then add the line
/bin/bash FreeBSD sudo pkg install bash chsh -s /usr/local/bin/bash Installing bash using pkg automatically updates /etc/shells
Installing Some Utilities dnsutils	# dig, nslookupjoe	# text editorlynx	# text-mode web browserpbzip2	# paralled bzip2pigz	# parallel gziprlwrap	# enables backspace for some CLI commandsInstalling from a packages list #!/bin/bash -e cd /root/setupfiles/ apt-get install `cat *-dpkg.</description>
    </item>
    
    <item>
      <title>ssh</title>
      <link>https://algo.minetest.in/Unix-Setup/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://algo.minetest.in/Unix-Setup/ssh/</guid>
      <description>Generate a keypair for server-side user accounts
#!/bin/bash -e rlwrap ssh-keygen -t rsa -b 2048  Do not specify password for keypair Additionally rename your keys something sensible!   id_ed25519 : Private key id_ed25519.pub : Public key  Now as a good practice rename keys according to server. For example :
smk.prvkey and smk.pubkey
  Never share your private key. Never ever never!
  smk.pubkey should be appended to &amp;quot;$HOME/.</description>
    </item>
    
    <item>
      <title>user</title>
      <link>https://algo.minetest.in/Unix-Setup/user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://algo.minetest.in/Unix-Setup/user/</guid>
      <description>Adding a ordinary user rlwrap adduser sally Initially, only the account name and passwords are important. Other fields can be left empty. Account name should be lower-case!
then execute this
THEM=sally HOUSE=/home/$THEM chmod 700 $HOUSE mkdir -p $HOUSE/.ssh chmod 700 $HOUSE/.ssh touch $HOUSE/.ssh/authorized_keys chown -R $THEM.$THEM $HOUSE Replace sally with appropriate user name.
Public key of the user should who should have access should go into authorized_keys
cat /tmp/sally.pubkey &amp;gt;&amp;gt; /home/sally/.</description>
    </item>
    
    <item>
      <title>user bins</title>
      <link>https://algo.minetest.in/Unix-Setup/bins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://algo.minetest.in/Unix-Setup/bins/</guid>
      <description>Steps : Creating directories for utilities #!/bin/bash -e mkdir -p /opt/minebest/mtbin mkdir -p /opt/smkbin Next we create a text file &amp;quot;/etc/profile.d/smkbin.sh&amp;quot; containing
for dir in \ 	/opt/minebest/mtbin \ 	/opt/minebest/smkbin \ 	/opt/smkbin do if [ -d $dir ]; then PATH=$dir:$PATH; fi done File needs to be readable but doesn&amp;rsquo;t need to be executable
Next Step : editing &amp;ldquo;secure_path&amp;rdquo; setting in &amp;quot;/etc/sudoers&amp;quot; to prepend the directories from preceding script which exists</description>
    </item>
    
    <item>
      <title>GNU screen</title>
      <link>https://algo.minetest.in/Unix-Setup/screen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://algo.minetest.in/Unix-Setup/screen/</guid>
      <description>GNU Screen is a terminal multiplexer, a software that can be used to multiplex several virtual consoles, allowing a user to access multiple separate login session inside of a single terminal window, or detach and reattach session from a terminal.
Following contains some useful config and screenrc for GNU screen.
Screen Config edit or create /etc/screenrc or ~/.screenrc and add below code. This code adds a nice status bar to the default screen.</description>
    </item>
    
    <item>
      <title>tmux</title>
      <link>https://algo.minetest.in/Unix-Setup/tmux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://algo.minetest.in/Unix-Setup/tmux/</guid>
      <description>tmux is another alternative to screen
Following contains some useful config and .tmux.conf for GNU screen.
Config Note it uses same Ctrl+a prefix.
set -ga terminal-overrides &amp;#34;,xterm-256color*:Tc&amp;#34; unbind C-b set-option -g prefix C-a bind-key C-a send-prefix set -g status-style &amp;#39;bg=#333333 fg=#5eacd3&amp;#39; bind r source-file ~/.tmux.conf set -g base-index 1 set-window-option -g mode-keys vi bind -T copy-mode-vi v send-keys -X begin-selection bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel &amp;#39;xclip -in -selection clipboard&amp;#39; # vim-like pane switching bind -r ^ last-window bind -r k select-pane -U bind -r j select-pane -D bind -r h select-pane -L bind -r l select-pane -R bind -r D neww -c &amp;#34;#{pane_current_path}&amp;#34; &amp;#34;[[ -e TODO.</description>
    </item>
    
    <item>
      <title>VCS</title>
      <link>https://algo.minetest.in/Unix-Setup/rcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://algo.minetest.in/Unix-Setup/rcs/</guid>
      <description>In software engineering, version control (also known as **revision control, source control, **or source code management) is class of systems responsible for managing changes to computers programs, documents, large websites, or other collections of information.
Changes are usually identified by a number or letter code termed as &amp;ldquo;revision number&amp;rdquo;.
Source-management models Traditional VCS uses a centralized model where all revision control function take place on a shared server. Centralized VCS solves problem of overwriting of code by two programmers by using one of two different &amp;ldquo;source-management models&amp;rdquo; : file locking and version merging.</description>
    </item>
    
  </channel>
</rss>
